<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.parkyangji.openmarket.backend.user.mapper.UserSqlMapper">
  <!-- 회원가입 -->
  <insert id="insertCustomer">
      <!-- MySQL의 경우 LAST_INSERT_ID() 등을 활용 -->
      <selectKey keyProperty="customer_id" resultType="int" order="AFTER">
          SELECT LAST_INSERT_ID()
      </selectKey>
      
      INSERT INTO customer(username, password, nickname)
      VALUES(#{username}, SHA2(concat(#{password}, '!@www'), '256'), #{nickname})
  </insert>

  <select id="getAddressCountByCustomerId" resultType="int">
      SELECT COUNT(*)
      FROM address
      WHERE customer_id = #{customerId}
  </select>
  <insert id="insertAddress">
		INSERT INTO address(customer_id, address, is_default, name, phone)
		VALUES(#{customer_id}, #{address}, ${is_default} , #{name}, #{phone})
  </insert>
  <select id="selectDefalutAddress" resultType="com.parkyangji.openmarket.backend.dto.AddressDto">
    select * from address where is_default = true and customer_id = #{customerId}
  </select>
  
  <!-- 아이디 비번 -->
	<select id="selectLoginCheck" resultType="com.parkyangji.openmarket.backend.dto.CustomerDto">
		select * from customer c
		where c.username = #{username} and c.password = SHA2(concat(#{password}, '!@www'), '256')
	</select>

  <!-- <select id="selectProductDto" resultType="com.parkyangji.openmarket.backend.dto.ProductDto">
    SELECT * FROM product WHERE product_id = #{product_id}
  </select> -->

  <select id="selectAvgRating" resultType="Float">
    SELECT AVG(rating) FROM product_review WHERE product_id = #{product_id};
  </select>

  <select id="selectStoreName" resultType="String">
    SELECT store_name FROM seller WHERE seller_id = #{seller_id};
  </select>
  
  <select id="selectReviews" resultType="com.parkyangji.openmarket.backend.dto.ProductReviewDto">
    SELECT * FROM product_review WHERE product_id = #{product_id} AND content IS NOT NULL;
  </select>

  <select id="selectCustomer" resultType="com.parkyangji.openmarket.backend.dto.CustomerDto">
    SELECT * FROM customer WHERE customer_id = #{customer_id};
  </select>
  
  <insert id="insertOrder">
      <!-- MySQL의 경우 LAST_INSERT_ID() 등을 활용 -->
      <selectKey keyProperty="order_id" resultType="int" order="AFTER">
          SELECT LAST_INSERT_ID()
      </selectKey>
      INSERT INTO `order` (customer_id) 
      VALUES (#{customer_id})
  </insert>

  <insert id="insertDeliveryInfo">
    INSERT INTO delivery_info(order_id, address_id, delivery_message)
    VALUES (#{order_id}, #{address_id}, #{delivery_message})
  </insert>

  <select id="selectAddressList" resultType="String">
    SELECT address FROM address WHERE customer_id = #{customer_id};
  </select>

  <!-- <select id="selectOrderList" resultType="com.parkyangji.openmarket.backend.dto.OrderDto">
    SELECT * FROM product_order WHERE customer_id = #{customer_id} ORDER BY order_id DESC;
  </select> -->

  <select id="selectReviewByProductAndCustomer" resultType="com.parkyangji.openmarket.backend.dto.ProductReviewDto">
      SELECT * FROM product_review
      WHERE product_id = #{product_id} AND customer_id = #{customer_id} AND order_id = #{order_id}
  </select>

  <insert id="insertReview">
      INSERT INTO product_review (product_id, customer_id, order_id, content, rating)
      VALUES (#{product_id}, #{customer_id}, #{order_id}, #{content}, #{rating})
  </insert>

  <update id="updateReview">
      UPDATE product_review
      <set>
          <if test="content != null">content = #{content},</if>
          <if test="rating != 0">rating = #{rating},</if>
          created_date = NOW()
      </set>
      WHERE review_id = #{review_id}
  </update>

  <select id="selectLike" resultType="com.parkyangji.openmarket.backend.dto.ProductFavoriteDto">
    select * from product_favorite where customer_id = #{customer_id} and product_id = #{product_id}
  </select>

  <insert id="insertLike">
    insert into product_favorite(customer_id,product_id) values(#{customer_id},#{product_id})
  </insert>

  <delete id="deleteLike">
    delete from product_favorite where customer_id = #{customer_id} and product_id = #{product_id}
  </delete>

  <select id="selectUserFavoriteList"  resultType="com.parkyangji.openmarket.backend.dto.ProductFavoriteDto">
    select * from product_favorite where customer_id = #{customer_id}
  </select>


  <select id="selectCategoryIdProducts" resultType="com.parkyangji.openmarket.backend.dto.ProductDto" parameterType="list">
      SELECT * FROM product
      WHERE category_id IN
      <foreach item="categoryId" collection="list" open="(" separator="," close=")">
          #{categoryId}
      </foreach>
  </select>

  <select id="selectProductListByCategoryId" parameterType="list" resultType="com.parkyangji.openmarket.backend.dto.ProductDetailReturnDto">
    SELECT p.product_id, s.store_name, s.store_eng_name,
          p.category_id, p.title,
          poi.price as origin_price, 
          IF(ssi.discount_rate IS NOT NULL, ssi.discount_rate , NULL ) as discount_rate,
          IF(ssi.discount_rate IS NOT NULL, Floor(MIN(poi.price) * (100 - ssi.discount_rate) / 100), NULL) as sale_price
    FROM seller s
    JOIN product p ON p.seller_id = s.seller_id
    JOIN product_image pi ON p.product_id = pi.product_id
    JOIN product_option_combination poc ON p.product_id = poc.product_id
    JOIN product_option_inventory poi ON poc.combination_id = poi.combination_id
    LEFT JOIN seller_sale_item ssi ON poc.product_id = ssi.product_id
    WHERE p.category_id IN 
    <foreach item="categoryId" collection="list" open="(" separator="," close=")">
      #{categoryId}
    </foreach>
    GROUP BY p.product_id 
    ORDER BY p.created_date DESC
    ;
  </select>



  <select id="selectSubCategorys" resultType="map">
    SELECT category_name, category_id FROM product_category pc WHERE pc.parent_id = #{parent_id};
  </select>

  <!-- 장바구니 -->
  <select id="selectCustomerCart" resultType="com.parkyangji.openmarket.backend.dto.CustomerCartDto">
    SELECT * FROM customer_cart WHERE customer_id = #{customer_id}
  </select>
  <insert id="insertCustomerCart" useGeneratedKeys="true" keyProperty="cart_id" parameterType="com.parkyangji.openmarket.backend.dto.CustomerCartDto">
    insert into customer_cart(customer_id) 
    values(#{customer_id})
  </insert>

  <!-- 기존 cart_item에 동일한 cart_id와 combination_id가 있는지 확인 -->
  <select id="checkExistingCartItem" resultType="java.lang.Integer">
      SELECT quantity FROM cart_item
      WHERE cart_id = #{cart_id} AND combination_id = #{combination_id}
  </select>

  <!-- cart_item을 업데이트 -->
  <update id="updateCartItemQuantity">
      UPDATE cart_item
      SET quantity = quantity + #{quantity}
      WHERE cart_id = #{cart_id} AND combination_id = #{combination_id}
  </update>
  <update id="updateCartItemExQuantity">
      UPDATE cart_item
      SET quantity = #{quantity}
      WHERE cart_id = #{cart_id} AND combination_id = #{combination_id}
  </update>
  <insert id="insertCartItem">
      INSERT INTO cart_item (cart_id, quantity, combination_id)
      VALUES (#{cart_id}, #{quantity}, #{combination_id})
  </insert>
  <delete id="deleteCart">
    delete from customer_cart where cart_id = #{cart_id}
  </delete>
  <delete id="deleteCartItem">
    delete from cart_item where cart_id = #{cart_id} and combination_id = #{combination_id}
  </delete>

  <select id="selectExQuantityByOrderId" resultType="com.parkyangji.openmarket.backend.dto.CartItemDto">
    SELECT ci.cart_id ,ci.combination_id , (od.quantity - ci.quantity) as quantity
    FROM order_detail od
    JOIN cart_item ci 
    ON od.combination_id = ci.combination_id
    WHERE od.order_id = #{order_id}
    ;
  </select>
  
  <select id="selectCustomerCartItems" resultType="com.parkyangji.openmarket.backend.dto.CartItemReturnDto">
    SELECT ci.cart_id, s.store_name, p.product_id , p.title , pcv.combination_id ,
    ov.optionvalue as optionvalue, po.optionvalue as optionname,
    ci.quantity , poi.price as origin_price,
    IF(ssi.discount_rate IS NOT NULL, ssi.discount_rate , NULL ) as discount_rate,
    IF(ssi.discount_rate IS NOT NULL, poi.price * (100 - ssi.discount_rate) / 100, NULL) as sale_price
    FROM product_option_combination poc
    join product_combination_value pcv
    on poc.combination_id = pcv.combination_id 
    LEFT JOIN cart_item ci
    ON ci.combination_id = pcv.combination_id 
    LEFT JOIN customer_cart cc 
    ON ci.cart_id = cc.cart_id 
    join product_option_value ov
    on ov.option_value_id = pcv.option_value_id 
    join product_option po 
    on ov.option_id = po.option_id 
    JOIN product_option_inventory poi 
    on poi.combination_id = pcv.combination_id 
    LEFT JOIN seller_sale_item ssi 
    on ssi.product_id = poc.product_id 
    join product p 
    on poc.product_id = p.product_id 
    JOIN seller s
    on p.seller_id = s.seller_id 
    WHERE cc.customer_id = #{customer_id}
    ;
  </select>
  <select id="selectTempCartItems" parameterType="map" resultType="com.parkyangji.openmarket.backend.dto.CartItemReturnDto">
    SELECT po.product_id , s.store_name, p.title, cv.combination_id
    ,ov.optionvalue , po.optionvalue as optionname , 
    poi.price as origin_price,
    IF(ssi.discount_rate IS NOT NULL, ssi.discount_rate , NULL ) as discount_rate,
    IF(ssi.discount_rate IS NOT NULL, poi.price * (100 - ssi.discount_rate) / 100, NULL) as sale_price
    FROM product_option_combination poc
    join product_combination_value cv -- 여기가 최종
    on poc.combination_id = cv.combination_id 
    join product_option_value ov
    on cv.option_value_id = ov.option_value_id
    join product_option_inventory poi
    on cv.combination_id = poi.combination_id 
    join product_option po 
    on po.option_id = ov.option_id 
    LEFT JOIN seller_sale_item ssi 
    ON po.product_id = ssi.product_id
    join product p 
    on poc.product_id = p.product_id 
    JOIN seller s
    on p.seller_id = s.seller_id 
    where cv.combination_id IN 
      <foreach item="id" collection="combination_id" open="(" separator="," close=")">
          #{id}
      </foreach>
    and po.product_id = #{product_id};
  </select>
  <select id="selectCustomerOrderDetails" parameterType="com.parkyangji.openmarket.backend.dto.CartItemReturnDto">
    SELECT ci.combination_id , ci.quantity, poi.price as origin_price,
    IF(ssi.discount_rate IS NOT NULL, ssi.discount_rate , NULL ) as discount_rate,
    IF(ssi.discount_rate IS NOT NULL, poi.price * (100 - ssi.discount_rate) / 100, NULL) as sale_price
    FROM customer_cart cc 
    JOIN cart_item ci 
    ON cc.cart_id = ci.cart_id
    JOIN product_option_inventory poi 
    ON ci.combination_id = poi.combination_id
    JOIN product_option_combination poc 
    ON poi.combination_id = poc.combination_id
    LEFT JOIN seller_sale_item ssi 
    ON ssi.product_id = poc.product_id 
    where cc.customer_id = #{customer_id}
    ;
  </select>
  <insert id="insertOrderDetails" parameterType="list">
    INSERT INTO order_detail(order_id, combination_id, quantity, price)
    VALUES
    <foreach item="OrderDetailDto" collection="list" separator=",">
        (#{OrderDetailDto.order_id}, #{OrderDetailDto.combination_id}, #{OrderDetailDto.quantity}, #{OrderDetailDto.price})
    </foreach>
  </insert>
  <select id="selectOrderList" resultType="com.parkyangji.openmarket.backend.dto.OrderItemReturnDto">
    SELECT cc.order_date, ci.order_detail_id, cc.order_id , ci.status, p.product_id ,s.store_name, p.title , pcv.combination_id ,
    ov.optionvalue as optionvalue, po.optionvalue as optionname,
    ci.quantity, poi.price as origin_price,
    IF(ssi.discount_rate IS NOT NULL, ssi.discount_rate , NULL ) as discount_rate,
    IF(ssi.discount_rate IS NOT NULL, poi.price * (100 - ssi.discount_rate) / 100, NULL) as sale_price
    FROM product_option_combination poc
    join product_combination_value pcv
    on poc.combination_id = pcv.combination_id 
    JOIN order_detail ci
    ON ci.combination_id = pcv.combination_id 
    LEFT JOIN `order` cc 
    ON ci.order_id = cc.order_id 
    join product_option_value ov
    on ov.option_value_id = pcv.option_value_id 
    join product_option po 
    on ov.option_id = po.option_id 
    JOIN product_option_inventory poi 
    on poi.combination_id = pcv.combination_id 
    LEFT JOIN seller_sale_item ssi 
    on ssi.product_id = poc.product_id 
    join product p 
    on poc.product_id = p.product_id 
    JOIN seller s
    on p.seller_id = s.seller_id 
    WHERE cc.customer_id = #{customer_id}
    ORDER BY order_id desc, order_detail_id desc, optionname
    ;
  </select>


  <select id="사용자 구매내역 찜 리스트 카테고리 추천 5개 상품">
    WITH MostOrderedCategories AS (
        SELECT p.category_id, COUNT(*) AS order_count
        FROM product_order o
        JOIN product p ON o.product_id = p.product_id
        WHERE o.customer_id = :customerId
        GROUP BY p.category_id
        ORDER BY order_count DESC
        LIMIT 1
    ),
    MostLikedCategories AS (
        SELECT p.category_id, COUNT(*) AS like_count
        FROM product_favorite f
        JOIN product p ON f.product_id = p.product_id
        WHERE f.customer_id = :customerId
        GROUP BY p.category_id
        ORDER BY like_count DESC
        LIMIT 1
    ),
    RecommendedCategories AS (
        SELECT category_id FROM MostOrderedCategories
        UNION
        SELECT category_id FROM MostLikedCategories
    )
    SELECT *
    FROM product
    WHERE category_id IN (SELECT category_id FROM RecommendedCategories)
    LIMIT 5;
  </select>

</mapper>
