<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.parkyangji.openmarket.backend.user.mapper.UserSqlMapper">
  <!-- 회원가입 -->
  <insert id="insertCustomer">
      <!-- MySQL의 경우 LAST_INSERT_ID() 등을 활용 -->
      <selectKey keyProperty="customer_id" resultType="int" order="AFTER">
          SELECT LAST_INSERT_ID()
      </selectKey>
      
      INSERT INTO customer(username, password, nickname, name, gender, phone)
      VALUES(#{username}, SHA2(concat(#{password}, '!@www'), '256'), #{nickname}, #{name}, #{gender}, #{phone})
  </insert>

  <insert id="insertAddress">
		INSERT INTO address(customer_id, address)
		VALUES(#{customer_id}, #{address})
  </insert>
  
  <!-- 아이디 비번 -->
	<select id="selectLoginCheck" resultType="com.parkyangji.openmarket.backend.dto.CustomerDto">
		select * from customer c
		where c.username = #{username} and c.password = SHA2(concat(#{password}, '!@www'), '256')
	</select>

  <!-- <select id="selectProductDto" resultType="com.parkyangji.openmarket.backend.dto.ProductDto">
    SELECT * FROM product WHERE product_id = #{product_id}
  </select> -->

  <select id="selectAvgRating" resultType="Float">
    SELECT AVG(rating) FROM product_review WHERE product_id = #{product_id};
  </select>

  <select id="selectStoreName" resultType="String">
    SELECT store_name FROM seller WHERE seller_id = #{seller_id};
  </select>
  
  <select id="selectReviews" resultType="com.parkyangji.openmarket.backend.dto.ProductReviewDto">
    SELECT * FROM product_review WHERE product_id = #{product_id} AND content IS NOT NULL;
  </select>

  <select id="selectCustomer" resultType="com.parkyangji.openmarket.backend.dto.CustomerDto">
    SELECT * FROM customer WHERE customer_id = #{customer_id};
  </select>
  
  <insert id="insertOrder">
      <!-- MySQL의 경우 LAST_INSERT_ID() 등을 활용 -->
      <selectKey keyProperty="order_id" resultType="int" order="AFTER">
          SELECT LAST_INSERT_ID()
      </selectKey>
      INSERT INTO product_order(customer_id, product_id, quantity, delivery_address, status)
      VALUES(#{customer_id}, #{product_id}, #{quantity}, #{delivery_address}, #{status})
  </insert>

  <update id="updateTotalQuantity">
    update product set total_quantity = total_quantity - #{quantity} where product_id = #{product_id}
  </update>

  <select id="selectAddressList" resultType="String">
    SELECT address FROM address WHERE customer_id = #{customer_id};
  </select>

  <select id="selectOrderList" resultType="com.parkyangji.openmarket.backend.dto.OrderDto">
    SELECT * FROM product_order WHERE customer_id = #{customer_id} ORDER BY order_id DESC;
  </select>

  <select id="selectReviewByProductAndCustomer" resultType="com.parkyangji.openmarket.backend.dto.ProductReviewDto">
      SELECT * FROM product_review
      WHERE product_id = #{product_id} AND customer_id = #{customer_id} AND order_id = #{order_id}
  </select>

  <insert id="insertReview">
      INSERT INTO product_review (product_id, customer_id, order_id, content, rating)
      VALUES (#{product_id}, #{customer_id}, #{order_id}, #{content}, #{rating})
  </insert>

  <update id="updateReview">
      UPDATE product_review
      <set>
          <if test="content != null">content = #{content},</if>
          <if test="rating != 0">rating = #{rating},</if>
          created_date = NOW()
      </set>
      WHERE review_id = #{review_id}
  </update>

  <select id="selectLike" resultType="com.parkyangji.openmarket.backend.dto.ProductFavoriteDto">
    select * from product_favorite where customer_id = #{customer_id} and product_id = #{product_id}
  </select>

  <insert id="insertLike">
    insert into product_favorite(customer_id,product_id) values(#{customer_id},#{product_id})
  </insert>

  <delete id="deleteLike">
    delete from product_favorite where customer_id = #{customer_id} and product_id = #{product_id}
  </delete>

  <select id="selectUserFavoriteList"  resultType="com.parkyangji.openmarket.backend.dto.ProductFavoriteDto">
    select * from product_favorite where customer_id = #{customer_id}
  </select>

  <!-- <select id="selectCategoryIdProducts" resultType="com.parkyangji.openmarket.backend.dto.ProductDto">
    select * from product where category_id = #{category_id}
  </select> -->

  <select id="selectCategoryIdProducts" resultType="com.parkyangji.openmarket.backend.dto.ProductDto" parameterType="list">
      SELECT * FROM product
      WHERE category_id IN
      <foreach item="categoryId" collection="list" open="(" separator="," close=")">
          #{categoryId}
      </foreach>
  </select>

  <select id="selectProductWithThumbnail" parameterType="list" resultType="com.parkyangji.openmarket.backend.vo.ProductThumbnailVo">
    SELECT p.product_id, s.store_name,
          p.category_id, p.title, pi.image_url,
          poi.price as origin_price, 
          IF(ssi.discount_rate IS NOT NULL, ssi.discount_rate , NULL ) as discount_rate,
          IF(ssi.discount_rate IS NOT NULL, MIN(poi.price) * (100 - ssi.discount_rate) / 100, NULL) as sale_price
    FROM seller s
    JOIN product p ON p.seller_id = s.seller_id
    JOIN product_image pi ON p.product_id = pi.product_id
    JOIN image_type it ON pi.image_type_id = it.image_type_id AND it.type_name = 'thumbnail'
    JOIN product_option_combination poc ON p.product_id = poc.product_id
    JOIN product_option_inventory poi ON poc.combination_id = poi.combination_id
    LEFT JOIN seller_sale_item ssi ON poc.product_id = ssi.product_id
    WHERE p.category_id IN 
    <foreach item="categoryId" collection="list" open="(" separator="," close=")">
      #{categoryId}
    </foreach>
    GROUP BY p.product_id 
    ORDER BY p.created_date DESC
    ;
  </select>

  <!-- <select id="selectCategoryName" resultType="String">
    select category_name from product_category where category_id = #{category_id};
  </select> -->

  <select id="selectSubCategorys" resultType="map">
    SELECT category_name, category_id FROM product_category pc WHERE pc.parent_id = #{parent_id};
  </select>
    <!-- <select id="selectSubCategorys" resultType="map">
        <include refid="com.parkyangji.openmarket.backend.common.CommonSqlMapper.selectSubCategorysSql"/>
    </select> -->

  <select id="사용자 구매내역 찜 리스트 카테고리 추천 5개 상품">
    WITH MostOrderedCategories AS (
        SELECT p.category_id, COUNT(*) AS order_count
        FROM product_order o
        JOIN product p ON o.product_id = p.product_id
        WHERE o.customer_id = :customerId
        GROUP BY p.category_id
        ORDER BY order_count DESC
        LIMIT 1
    ),
    MostLikedCategories AS (
        SELECT p.category_id, COUNT(*) AS like_count
        FROM product_favorite f
        JOIN product p ON f.product_id = p.product_id
        WHERE f.customer_id = :customerId
        GROUP BY p.category_id
        ORDER BY like_count DESC
        LIMIT 1
    ),
    RecommendedCategories AS (
        SELECT category_id FROM MostOrderedCategories
        UNION
        SELECT category_id FROM MostLikedCategories
    )
    SELECT *
    FROM product
    WHERE category_id IN (SELECT category_id FROM RecommendedCategories)
    LIMIT 5;
  </select>

</mapper>
